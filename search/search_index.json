{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Brimdor's Homelab","text":"<p>Features \u2022 Get Started \u2022 Documentation</p> <p>This project utilizes Infrastructure as Code and GitOps to automate provisioning, operating, and updating self-hosted services in my homelab. It can be used as a highly customizable framework to build your own homelab.</p> <p>What is a homelab?</p> <p>Homelab is a laboratory at home where you can self-host, experiment with new technologies, practice for certifications, and so on. For more information about homelab in general, see the r/homelab introduction.</p>"},{"location":"#overview","title":"Overview","text":"<p>Project status: BETA</p> <p>This project is still in the experimental stage, and I don't use anything critical on it. Expect breaking changes that may require a complete redeployment. A proper upgrade path is planned for the stable release. More information can be found in the roadmap below.</p>"},{"location":"#hardware","title":"Hardware","text":"<ul> <li>8 \u00d7 Lenovo Thinkcentre M700:<ul> <li>CPU: <code>Intel Core i5-6600T @ 2.70GHz</code></li> <li>RAM: <code>16GB</code></li> <li>SSD: <code>128GB</code></li> </ul> </li> <li>1 x Lenovo Thinkcentre M900:<ul> <li>CPU: <code>Intel Core i7-6700 @ 4.0GHz</code></li> <li>RAM: <code>32GB</code></li> <li>SSD: <code>1TB</code></li> </ul> </li> <li>Protectli Vault FW2B:<ul> <li>CPU: <code>Intel Dual Core</code></li> <li>RAM: <code>4GB</code></li> <li>SSD: <code>32GB</code></li> </ul> </li> <li>Linksys <code>LGS124</code> Unmanaged Switch:<ul> <li>PORTS: <code>24</code></li> <li>BANDWIDTH: <code>10/100/1000</code></li> </ul> </li> <li>Custom NAS:<ul> <li>Operating System: <code>UNRAID</code></li> <li>HDD: <code>6 NAS Rated Drives</code></li> <li>SSD: <code>2 for Cache</code></li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> Common applications: Gitea, Seafile, Jellyfin, Paperless...</li> <li> Automated bare metal provisioning with PXE boot</li> <li> Automated Kubernetes installation and management</li> <li> Installing and managing applications using GitOps</li> <li> Automatic rolling upgrade for OS and Kubernetes</li> <li> Automatically update apps (with approval)</li> <li> Modular architecture, easy to add or remove features/components</li> <li> Automated certificate management</li> <li> Automatically update DNS records for exposed services</li> <li> VPN without port forwarding</li> <li> Expose services to the internet securely with Cloudflare Tunnel</li> <li> CI/CD platform</li> <li> Private container registry</li> <li> Distributed storage</li> <li> Support multiple environments (dev, prod)</li> <li> Monitoring and alerting</li> <li> Automated offsite backups \ud83d\udea7</li> <li> Single sign-on</li> <li> Infrastructure testing</li> </ul>"},{"location":"#tech-stack","title":"Tech stack","text":"Logo Name Description Ansible Automate bare metal provisioning and configuration ArgoCD GitOps tool built to deploy applications to Kubernetes cert-manager Cloud native certificate management Cilium eBPF-based Networking, Observability and Security (CNI, LB, Network Policy, etc.) Cloudflare DNS and Tunnel Docker Ephemeral PXE server and convenient tools container ExternalDNS Synchronizes exposed Kubernetes Services and Ingresses with DNS providers Fedora Server Base OS for Kubernetes nodes Gitea Self-hosted Git service Grafana Observability platform Helm The package manager for Kubernetes K3s Lightweight distribution of Kubernetes Kanidm Modern and simple identity management platform Kubernetes Container-orchestration system, the backbone of this project Loki Log aggregation system NGINX Kubernetes Ingress Controller ntfy Notification service to send notifications to your phone or desktop Prometheus Systems monitoring and alerting toolkit Renovate Automatically update dependencies Rook Ceph Cloud-Native Storage for Kubernetes Tailscale VPN without port forwarding Wireguard Fast, modern, secure VPN tunnel Woodpecker CI Simple yet powerful CI/CD engine with great extensibility Zot Registry Private container registry"},{"location":"#get-started","title":"Get Started","text":"<ul> <li>Deploy on real hardware for production workload</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<p>See roadmap and open issues for a list of proposed features and known issues.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Any contributions you make are greatly appreciated.</p> <p>Please see contributing guide for more information.</p>"},{"location":"#license","title":"License","text":"<p>Copyright \u00a9 2020 - 2022 Brimdor (Edited by Brimdor) based on khuedoan/homelab</p> <p>Distributed under the GPLv3 License. See license page or <code>LICENSE.md</code> file for more information.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Based on work originating from khuedoan/homelab - Buy him a coffee!!</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/certificate-management/","title":"Certificate management","text":"<p>Certificates are generated and managed by cert-manager with Let's Encrypt. By default certificates are valid for 90 days and will be renewed after 60 days.</p> <p>cert-manager watches <code>Ingress</code> resources across the cluster. When you create an <code>Ingress</code> with a supported annotation:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n  name: foo\nspec:\n  rules:\n    - host: foo.example.com\n      # ...\n  tls:\n    - hosts:\n        - foo.example.com\n      secretName: foo-tls-certificate\n</code></pre> <pre><code>flowchart LR\n  User -- 6 --&gt; Ingress\n\n  subgraph cluster[Homelab cluster]\n    Ingress --- Secret\n    Ingress -. 1 .-&gt; Certificate\n    Certificate -. 5 .-&gt; Secret\n    Certificate -- 2 --&gt; CertificateRequest -- 3 --&gt; Order -- 4 --&gt; Challenge\n  end\n\n  Order -.- ACMEServer[ACME server]\n\n  subgraph dnsprovider[DNS provider]\n    TXT\n  end\n\n  Challenge -- 4.a --&gt; TXT\n  ACMEServer -.- Challenge\n  ACMEServer -. 4.b .-&gt; TXT</code></pre> <ol> <li>cert-manager creates a corresponding <code>Certificate</code> resources</li> <li>Based on the <code>Certificate</code> resource, cert-manager creates a <code>CertificateRequest</code> resource to request a signed certificate from the configured <code>ClusterIssuer</code></li> <li>The <code>CertificateRequest</code> will create an order with an ACME server (we use Let's Encrypt), which is represented by the <code>Order</code> resource</li> <li>Then cert-manager will perform a DNS-01 <code>Challenge</code>:<ol> <li>Create a DNS TXT record (contains a computed key)</li> <li>The ACME server retrieve this key via a DNS lookup and validate that we own the domain for the requested certificate</li> </ol> </li> <li>cert-manager stores the certificate (typically <code>tls.crt</code> and <code>tls.key</code>) in the <code>Secret</code> specified in the <code>Ingress</code> configuration</li> <li>Now you can access the HTTPS website with a valid certificate</li> </ol> <p>A much more detailed diagram can be found in the official documentation under certificate lifecycle.</p>"},{"location":"concepts/pxe-boot/","title":"PXE boot","text":"<pre><code>flowchart TD\n  subgraph controller[Initial controller]\n    Ansible\n    dhcp[DHCP server]\n    tftp[TFTP server]\n    http[HTTP server]\n  end\n\n  machine[Bare metal machine]\n\n  Ansible -. 1 .-&gt; machine\n  machine &lt;-. 2, 3 .-&gt; dhcp\n  machine &lt;-. 4, 5 .-&gt; tftp\n  machine &lt;-. 6, 7 .-&gt; http</code></pre> <ol> <li>Ansible: Hey MAC address <code>xx:xx:xx:xx:xx:xx</code>, wake up!</li> <li>Machine: Hello everyone, I just woke up in network mode, could someone please show me how to boot?</li> <li>DHCP server: I hear you, here's your IP address, proceed to the next server to obtain your bootloader.</li> <li>Machine: Hello, could you please send me my bootloader?</li> <li>TFTP server: Here you go. Grab your boot configuration, kernel, and initial ramdisk as well.</li> <li>Machine: Hi, I just booted into my bootloader, and my boot parameters instructed me to get the installation instructions, packages, etc. from this site.</li> <li>HTTP server: It's all yours.</li> <li>Machine: Great, now I can install the OS and reboot!</li> </ol> <p>Here's how it looks like in action:</p>"},{"location":"concepts/secrets-management/","title":"Secrets management","text":""},{"location":"concepts/secrets-management/#overview","title":"Overview","text":"<ul> <li>Secrets are stored in HashiCorp Vault</li> <li>Vault is managed with Vault Operator (Bank Vaults), automatically initialize and unseal</li> <li>Secrets that can be generated are automatically generated and stored in Vault.</li> <li>Integrate with GitOps using External Secrets Operator</li> </ul> <p>Info</p> <p>Despite the name External Secrets Operator, our Vault is deployed on the same cluster. HashiCorp Vault can be replaced with AWS Secret Manager, Google Cloud Secret Manager, Azure Key Vault, etc.</p> <pre><code>flowchart TD\n  subgraph vault-namespace[vault namespace]\n    bank-vaults[Bank Vaults side car] -. init and unseal .- vault[(HashiCorp Vault)]\n    random-secret[Random secrets CronJob] -. generate secrets if not exist .-&gt; vault[(HashiCorp Vault)]\n  end\n\n  subgraph app-namespace[application namespace]\n    ExternalSecret -. generate .-&gt; Secret\n    App -- read --&gt; Secret\n  end\n\n  ClusterSecretStore --&gt; vault\n  ClusterSecretStore --&gt; ExternalSecret</code></pre>"},{"location":"concepts/secrets-management/#randomly-generated-secrets","title":"Randomly generated secrets","text":"<p>This is useful when you want to generate random secrets like admin password and store in Vault.</p> ./platform/vault/files/generate-secrets/config.yaml<pre><code># Gitea\n- path: gitea/admin\n  data:\n    - key: password\n      length: 32\n      special: true\n\n# Dex\n- path: dex/grafana\n  data:\n    - key: client_secret\n      length: 32\n      special: false\n\n# Trow\n- path: trow/admin\n  data:\n    - key: password\n      length: 32\n      special: true\n\n# Tekton\n- path: tekton/webhook\n  data:\n    - key: token\n      length: 32\n      special: false\n</code></pre>"},{"location":"concepts/secrets-management/#how-secrets-are-pulled-from-vault-to-kubernetes","title":"How secrets are pulled from Vault to Kubernetes","text":"<p>When you apply an <code>ExternalSecret</code> object, for example:</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: gitea-admin-secret\n  namespace: gitea\nspec:\n  data:\n  - remoteRef:\n      conversionStrategy: Default\n      key: /gitea/admin\n      property: password\n    secretKey: password\n  refreshInterval: 1h\n  secretStoreRef:\n    kind: ClusterSecretStore\n    name: vault\n  target:\n    creationPolicy: Owner\n    deletionPolicy: Retain\n    template:\n      data:\n        password: '{{ .password }}'\n        username: gitea_admin\n      engineVersion: v2\n</code></pre> <p>This will create a corresponding Kubernetes secret:</p> <p><code>kubectl describe secrets -n gitea gitea-admin-secret</code></p> <pre><code>Name:         gitea-admin-secret\nNamespace:    gitea\nLabels:       &lt;none&gt;\nAnnotations:  reconcile.external-secrets.io/data-hash: &lt;REDACTED&gt;\n\nType:  Opaque\n\nData\n====\npassword:  32 bytes\nusername:  11 bytes\n</code></pre> <p>Please see the official documentation for more information:</p> <ul> <li>External Secrets Operator</li> <li>API specification</li> </ul>"},{"location":"concepts/testing/","title":"Testing infrastructure code","text":"<p>We use Terratest for automated tests. The tests are written in Go and can be found at <code>./test</code>.</p> <p>TODO: more docs here (PR welcomed)</p>"},{"location":"concepts/tools-container/","title":"Tools container","text":"<p>The tools container makes it easy to get all of the dependencies needed to interact with the homelab.</p>"},{"location":"concepts/tools-container/#how-to-open-it","title":"How to open it","text":"<p>You can use the default Docker wrapper, or use Nix if you have Nix installed:</p> DockerNix <pre><code>make tools\n</code></pre> <pre><code>nix-shell\n</code></pre> <p>Tip</p> <p>If you have <code>direnv</code> installed, you can run <code>direnv allow</code> once and it will automatically enter the Nix shell.</p> <p>It will open a shell like this:</p> <pre><code>[nix-shell:/home/brimdor/Documents/homelab]# echo hello\nhello\n</code></pre>"},{"location":"concepts/tools-container/#how-it-works","title":"How it works","text":"<ul> <li>All dependencies are defined in <code>./shell.nix</code></li> <li>When you run <code>make tools</code>, it will run a thin Docker wrapper with the <code>nixos/nix</code> image (because not everyone has Nix installed) and mount some required volumes</li> <li><code>nix-shell</code> will start an interactive shell based on the Nix expression in <code>./shell.nix</code> and install everything from there</li> </ul>"},{"location":"concepts/tools-container/#known-issues","title":"Known issues","text":"<ul> <li>If your Docker engine is not running in rootless mode, all files created by the tools container will be owned by <code>root</code></li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/install-pre-commit-hooks/","title":"Install pre-commit hooks","text":"<p>Git hook scripts are useful for identifying simple issues before commiting changes.</p> <p>Install pre-commit first, one-liner for Arch users:</p> <pre><code>sudo pacman -S python-pre-commit\n</code></pre> <p>Then install git hook scripts:</p> <pre><code>make git-hooks\n</code></pre> <p>If you want to enable pre-commit on all repositories without enabling it manually, see automatically enabling pre-commit on repositories.</p>"},{"location":"getting-started/user-onboarding/","title":"User onboarding","text":"For userFor admin"},{"location":"getting-started/user-onboarding/#create-user","title":"Create user","text":"<p>Ask an admin to create your account, provide the following information:</p> <ul> <li> Full name (John Doe)</li> <li> Select a username (<code>johndoe</code>)</li> <li> Email address (<code>johndoe@example.com</code>)</li> </ul>"},{"location":"getting-started/user-onboarding/#install-companion-apps","title":"Install companion apps","text":"<p>For all users:</p> <ul> <li> Password manager</li> <li> Matrix chat client (optional, you can use the web version)</li> </ul> <p>For technical users:</p> <ul> <li> Docker</li> <li> Lens (optional, you can use the included <code>kubectl</code> or <code>k9s</code> command in the tools container)</li> </ul>"},{"location":"getting-started/user-onboarding/#create-a-new-account","title":"Create a new account","text":"<p>TODO</p>"},{"location":"getting-started/user-onboarding/#send-initial-password","title":"Send initial password","text":"<p>Choose one of the methods listed below to send the initial password to the user:</p> <ul> <li>Share via password manager (if supported)</li> <li>Encrypt the password file and send it via email or chat</li> <li>Simply write or print the password on a piece of paper</li> </ul> <p>On the first login, the user will be required to update their password.</p>"},{"location":"getting-started/user-onboarding/#appendix","title":"Appendix","text":""},{"location":"getting-started/user-onboarding/#recommended-password-managers","title":"Recommended password managers","text":"<ul> <li>Bitwarden (easy to use, but requires an online account)</li> <li>KeePassXC (completely offline, but you'll need to sync manually)</li> </ul>"},{"location":"how-to-guides/","title":"How-to guides","text":""},{"location":"how-to-guides/add-or-remove-nodes/","title":"Add or remove nodes","text":"<p>Or how to scale vertically. To replace the same node with a clean OS, remove it and add it again.</p>"},{"location":"how-to-guides/add-or-remove-nodes/#add-new-nodes","title":"Add new nodes","text":"<p>Tip</p> <p>You can add multiple nodes at the same time</p> <p>Add its details to the inventory at the end of the group (masters or workers):</p> metal/inventories/prod.yml<pre><code>diff --git a/metal/inventories/prod.yml b/metal/inventories/prod.yml\nindex 7f6474a..1bb2cbc 100644\n--- a/metal/inventories/prod.yml\n+++ b/metal/inventories/prod.yml\n@@ -8,3 +8,4 @@ metal:\n     workers:\n       hosts:\n         metal3: {ansible_host: 192.168.1.113, mac: '00:23:24:d1:f5:69', disk: sda, network_interface: eno1}\n+        metal4: {ansible_host: 192.168.1.114, mac: '00:11:22:33:44:55', disk: sda, network_interface: eno1}\n</code></pre> <p>Install the OS and join the cluster:</p> <pre><code>make metal\n</code></pre> <p>That's it!</p>"},{"location":"how-to-guides/add-or-remove-nodes/#remove-a-node","title":"Remove a node","text":"<p>Danger</p> <p>It is recommended to remove nodes one at a time</p> <p>Remove it from the inventory:</p> metal/inventories/prod.yml<pre><code>diff --git a/metal/inventories/prod.yml b/metal/inventories/prod.yml\nindex 7f6474a..d12b50a 100644\n--- a/metal/inventories/prod.yml\n+++ b/metal/inventories/prod.yml\n@@ -4,7 +4,6 @@ metal:\n       hosts:\n         metal0: {ansible_host: 192.168.1.110, mac: '00:23:24:d1:f3:f0', disk: sda, network_interface: eno1}\n         metal1: {ansible_host: 192.168.1.111, mac: '00:23:24:d1:f4:d6', disk: sda, network_interface: eno1}\n-        metal2: {ansible_host: 192.168.1.112, mac: '00:23:24:e7:04:60', disk: sda, network_interface: eno1}\n     workers:\n       hosts:\n         metal3: {ansible_host: 192.168.1.113, mac: '00:23:24:d1:f5:69', disk: sda, network_interface: eno1}\n</code></pre> <p>Drain the node:</p> <pre><code>kubectl drain ${NODE_NAME} --delete-emptydir-data --ignore-daemonsets --force\n</code></pre> <p>Remove the node from the cluster</p> <pre><code>kubectl delete node ${NODE_NAME}\n</code></pre> <p>Shutdown the node:</p> <pre><code>ssh root@${NODE_IP} poweroff\n</code></pre>"},{"location":"how-to-guides/alternate-dns-setup/","title":"Alternate DNS setup","text":"<p>Info</p> <pre><code>Skip this step if you already use the included Cloudflare setup\n</code></pre> <p>Before you can access the home page at https://home.example.com, you'll need to update your DNS config.</p> <p>Some options for DNS config (choose one):</p> <ul> <li>Change the DNS config at your domain registrar (already included and automated)</li> <li>Change the DNS config in your router (also works if you don't own a domain)</li> <li>Use nip.io (suitable for a test environment)</li> </ul>"},{"location":"how-to-guides/alternate-dns-setup/#at-your-domain-registrar-recommended","title":"At your domain registrar (recommended)","text":"<p>The default configuration is for Cloudflare DNS, but you can change the code to use other providers.</p>"},{"location":"how-to-guides/alternate-dns-setup/#in-your-router","title":"In your router","text":"<p>Tip</p> <p>If you don't have a domain, you can use the <code>home.arpa</code> domain (according to RFC-8375).</p> <p>You can add each subdomain one by one, or use a wildcard <code>*.example.com</code> and point it to the IP address of the load balancer. To acquire a list of subdomains and their addresses, use this command:</p> <pre><code>./scripts/get-dns-config\n</code></pre>"},{"location":"how-to-guides/alternate-dns-setup/#use-nipio","title":"Use nip.io","text":"<p>Preconfigured in the <code>dev</code> branch.</p>"},{"location":"how-to-guides/disable-dhcp-proxy-in-dnsmasq/","title":"Disable DHCP proxy in dnsmasq","text":""},{"location":"how-to-guides/disable-dhcp-proxy-in-dnsmasq/#overview","title":"Overview","text":"<p>Dnsmasq is used as either a DHCP server or DHCP proxy server for PXE metal provisioning.</p> <p>Proxy mode is enabled by default allowing the use of existing DHCP servers on the network. A good description on how DHCP Proxy works can be found on the related FOG project wiki page.</p>"},{"location":"how-to-guides/disable-dhcp-proxy-in-dnsmasq/#disabling-proxy-mode","title":"Disabling Proxy mode","text":"<p>Certain scenarios will require this project to use a DHCP server, such as an air-gap deployment or dedicated VLAN.</p> <p>To disable proxy mode thereby using dnsmasq as a DHCP server, modify <code>metal/roles/pxe_server/defaults/main.yml</code> and set <code>dhcp_proxy</code> to <code>false</code>.</p>"},{"location":"how-to-guides/expose-services-to-the-internet/","title":"Expose services to the internet","text":"<p>Info</p> <p>This tutorial is for Cloudflare Tunnel users, please skip if you use port forwarding.</p> <p>Apply the <code>./external</code> layer to create a tunnel if you haven't already, then add the following annotations to your <code>Ingress</code> object (replace <code>example.com</code> with your domain):</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    external-dns.alpha.kubernetes.io/target: \"homelab-tunnel.example.com\"\n    external-dns.alpha.kubernetes.io/cloudflare-proxied: \"true\"\n# ...\n</code></pre>"},{"location":"how-to-guides/run-commands-on-multiple-nodes/","title":"Run commands on multiple nodes","text":"<p>Use ansible-console:</p> <pre><code>cd metal\nmake console\n</code></pre> <p>Then enter the command(s) you want to run.</p> <p>Example</p> <p><code>root@all (4)[f:5]$ uptime</code></p> <pre><code>metal0 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.17, 0.15, 0.06\nmetal1 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.14, 0.11, 0.04\nmetal3 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.03, 0.02, 0.00\nmetal2 | CHANGED | rc=0 &gt;&gt;\n 10:52:02 up 2 min,  1 user,  load average: 0.06, 0.06, 0.02\n</code></pre>"},{"location":"how-to-guides/single-node-cluster-adjustments/","title":"Single node cluster adjustments","text":"<p>Update the following changes, then commit and push.</p>"},{"location":"how-to-guides/single-node-cluster-adjustments/#reduce-longhorn-replica-count","title":"Reduce Longhorn replica count","text":"<p>Set the <code>defaultClassReplicaCount</code> to 1:</p> system/longhorn-system/values.yaml<pre><code>longhorn:\n  defaultSettings:\n    nodeDownPodDeletionPolicy: delete-both-statefulset-and-deployment-pod\n  persistence:\n    # If you have three or more nodes for storage, use 3; otherwise use 2\n    defaultClassReplicaCount: 2  # TODO run DR test to see if we actually need 3\n</code></pre>"},{"location":"how-to-guides/single-node-cluster-adjustments/#disable-automatic-upgrade-for-os-and-k3s","title":"Disable automatic upgrade for OS and k3s","text":"<p>Because they will try to drain the only node, the pods will have no place to go. Remove them entirely:</p> <pre><code>rm -rf system/kured\nrm -rf system/system-upgrade\n</code></pre> <p>Commit and push the change. You can revert it later when you add more nodes.</p>"},{"location":"how-to-guides/updating-documentation/","title":"Updating documentation (this website)","text":"<p>This project uses the Di\u00e1taxis technical documentation framework. The website is generated using Material for MkDocs and can be viewed at homelab.eaglepass.io.</p> <p>There are 4 main parts:</p> <ul> <li>Getting started (tutorials): learning-oriented</li> <li>Concepts (explanation): understanding-oriented</li> <li>How-to guides: goal-oriented</li> <li>Reference: information-oriented</li> </ul>"},{"location":"how-to-guides/updating-documentation/#local-development","title":"Local development","text":"<p>To edit and view locally, run:</p> <pre><code>make docs\n</code></pre> <p>Then visit localhost:8000</p>"},{"location":"how-to-guides/updating-documentation/#deployment","title":"Deployment","text":"<p>It's running on my other cluster in the brimdor/horus project (so if the homelab goes down everyone can still read the documentation).</p>"},{"location":"how-to-guides/use-both-github-and-gitea/","title":"Use both GitHub and Gitea","text":"<p>Even though we self-host Gitea, you may still want to use GitHub as a backup and for discovery.</p> <p>Add both push URLs (replace my repositories with yours):</p> <pre><code>git remote set-url --add --push origin git@git.eaglepass.io:ops/homelab\ngit remote set-url --add --push origin git@github.com:brimdor/homelab\n</code></pre> <p>Now you can just run <code>git push</code> like usual and it will push to both GitHub and Gitea.</p>"},{"location":"how-to-guides/troubleshooting/","title":"Troubleshooting","text":""},{"location":"how-to-guides/troubleshooting/argocd/","title":"ArgoCD","text":"<p>TODO (PR welcomed)</p>"},{"location":"how-to-guides/troubleshooting/cert-manager/","title":"cert-manager","text":"<p>TODO (PR welcomed)</p>"},{"location":"how-to-guides/troubleshooting/gitea/","title":"Gitea","text":"<p>TODO (PR welcomed)</p>"},{"location":"how-to-guides/troubleshooting/longhorn/","title":"Longhorn","text":"<p>TODO (PR welcomed)</p>"},{"location":"how-to-guides/troubleshooting/pxe-boot/","title":"PXE boot","text":""},{"location":"how-to-guides/troubleshooting/pxe-boot/#pxe-server-logs","title":"PXE server logs","text":"<p>To view PXE server (includes DHCP, TFTP and HTTP server) logs:</p> <pre><code>./scripts/pxe-logs\n</code></pre> <p>Tip</p> <p>You can view the logs of one or more containers selectively, for example:</p> <pre><code>./scripts/pxe-logs dnsmasq\n./scripts/pxe-logs http\n</code></pre>"},{"location":"how-to-guides/troubleshooting/pxe-boot/#nodes-not-booting-from-the-network","title":"Nodes not booting from the network","text":"<ul> <li>Plug a monitor and a keyboard to one of the bare metal node if possible to make the debugging process easier</li> <li>Check if the controller (PXE server) is on the same subnet with bare metal nodes (sometimes Wifi will not work or conflict with wired Ethernet, try to turn it off)</li> <li>Check if bare metal nodes are configured to boot from the network</li> <li>Check if Wake-on-LAN is enabled</li> <li>Check if the operating system ISO file is mounted</li> <li>Check the controller's firewall config</li> <li>Check PXE server Docker logs</li> <li>Check if the servers are booting to the correct OS (Fedora Server installer instead of the previously installed OS), if not try to select it manually or remove the previous OS boot entry</li> <li>Examine the network boot process with Wireshark or Termshark</li> </ul>"},{"location":"how-to-guides/troubleshooting/vault/","title":"Vault","text":"<p>TODO (PR welcomed)</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/post-installation/","title":"Post-installation","text":""},{"location":"installation/post-installation/#backup-secrets","title":"Backup secrets","text":"<p>Save the following files to a safe location like a password manager (if you're using the sandbox, you can skip this step):</p> <ul> <li><code>~/.ssh/id_ed25519</code></li> <li><code>~/.ssh/id_ed25519.pub</code></li> <li><code>./metal/kubeconfig.yaml</code></li> <li><code>~/.terraform.d/credentials.tfrc.json</code></li> <li><code>./external/terraform.tfvars</code></li> </ul>"},{"location":"installation/post-installation/#admin-credentials","title":"Admin credentials","text":"<ul> <li>ArgoCD:<ul> <li>Username: <code>admin</code></li> <li>Password: run <code>./scripts/argocd-admin-password</code></li> </ul> </li> <li>Vault:<ul> <li>Root token: run <code>./scripts/vault-root-token</code></li> </ul> </li> <li>Grafana:<ul> <li>Username: <code>admin</code></li> <li>Password: <code>prom-operator</code> (TODO: use random password)</li> </ul> </li> <li>Gitea:<ul> <li>Username: <code>gitea_admin</code></li> <li>Password: get from Vault</li> </ul> </li> </ul>"},{"location":"installation/post-installation/#run-the-full-test-suite","title":"Run the full test suite","text":"<p>After the homelab has been stabilized, you can run the full test suite to ensure that everything is working properly:</p> <pre><code>make test\n</code></pre> <p>Info</p> <p>The \"full\" test suit is still in its early stages, so any contribution is greatly appreciated.</p>"},{"location":"installation/sandbox/","title":"Development sandbox","text":"<p>The sandbox is intended for trying out the homelab without any hardware or testing changes before applying them to the production environment.</p>"},{"location":"installation/sandbox/#prerequisites","title":"Prerequisites","text":"<p>Host machine:</p> <ul> <li>Recommended hardware specifications:<ul> <li>CPU: 4 cores</li> <li>RAM: 16 GiB</li> </ul> </li> <li>OS: Linux (Windows and macOS are untested, please let me know if it works)</li> <li>Available ports: <code>80</code> and <code>443</code></li> </ul> <p>Install the following packages:</p> <ul> <li><code>docker</code></li> <li><code>make</code></li> </ul> <p>Clone the repository and checkout the development branch:</p> <pre><code>git clone https://github.com/brimdor/homelab\ngit checkout dev\n</code></pre>"},{"location":"installation/sandbox/#build","title":"Build","text":"<p>Open the tools container, which includes all the tools needed:</p> DockerNix <pre><code>make tools\n</code></pre> <pre><code>nix-shell\n</code></pre> <p>Build a development cluster and bootstrap it:</p> <pre><code>make\n</code></pre> <p>Note</p> <p>It will take about 15 to 30 minutes to build depending on your internet connection</p>"},{"location":"installation/sandbox/#explore","title":"Explore","text":"<p>The homepage should be available at https://home.127-0-0-1.nip.io (ignore the security warning because we don't have valid certificates).</p> <p>See admin credentials for default passwords.</p> <p>If you want to make some changes, simply commit to the local <code>dev</code> branch and push it to Gitea in the sandbox:</p> <pre><code>git remote add sandbox https://git.127-0-0-1.nip.io/ops/homelab\ngit config http.https://git.127-0-0-1.nip.io.sslVerify false\n\ngit add foobar.txt\ngit commit -m \"feat: harness the power of the sun\"\ngit push sandbox # you can use the gitea_admin account\n</code></pre>"},{"location":"installation/sandbox/#clean-up","title":"Clean up","text":"<p>Delete the cluster:</p> <pre><code>k3d cluster delete homelab-dev\n</code></pre>"},{"location":"installation/sandbox/#caveats-compare-to-production-environment","title":"Caveats compare to production environment","text":"<p>The development cluster doesn't have the following features:</p> <ul> <li>There is no valid domain name, hence no SSL certificates (some services require valid SSL certificates)</li> <li>Only accessible on the host machine</li> <li>No backup</li> </ul> <p>Please keep in mind that the development cluster may be unstable and things may break (it's for development after all).</p>"},{"location":"installation/production/","title":"Production","text":""},{"location":"installation/production/configuration/","title":"Configuration","text":"<p>Open the tools container, which includes all the tools needed:</p> DockerNix <pre><code>make tools\n</code></pre> <pre><code>nix-shell\n</code></pre> <p>Note</p> <p>It will take a while to build the tools container on the first time</p> <p>Run the following script to configure the homelab:</p> <pre><code>make configure\n</code></pre> <p>Example</p> <pre><code>Text editor (nvim):\nEnter seed repo (github.com/brimdor/homelab): github.com/example/homelab\nEnter your domain (eaglepass.io): example.com\n</code></pre> <p>It will prompt you to edit the inventory:</p> <ul> <li>IP address: the desired one, not the current one, since your servers have no operating system installed yet</li> <li>Disk: based on <code>/dev/$DISK</code>, in my case it's <code>sda</code>, but yours can be <code>sdb</code>, <code>nvme0n1</code>...</li> <li>Network interface: usually it's <code>eth0</code>, mine is <code>eno1</code></li> <li>MAC address: the lowercase, colon separated MAC address of the above network interface</li> </ul> <p>Example</p> metal/inventories/prod.yml<pre><code>metal:\n  children:\n    masters:\n      hosts:\n        charmander:\n          {\n            ansible_host: 10.0.50.121,\n            mac: \"00:23:24:b0:ff:03\",\n            disk: sda,\n            network_interface: eno1,\n          }\n        squirtle:\n          {\n            ansible_host: 10.0.50.122,\n            mac: \"00:23:24:e2:1f:a1\",\n            disk: sda,\n            network_interface: eno1,\n          }\n        bulbasaur:\n          {\n            ansible_host: 10.0.50.123,\n            mac: \"00:23:24:e2:0d:ea\",\n            disk: sda,\n            network_interface: eno1,\n          }\n    workers:\n      hosts:\n        pikachu:\n          {\n            ansible_host: 10.0.50.124,\n            mac: \"e0:4f:43:24:0b:53\",\n            disk: sda,\n            network_interface: eno1,\n          }\n</code></pre> <p>At the end it will show what has changed. After examining the diff, commit and push the changes.</p>"},{"location":"installation/production/deployment/","title":"Deployment","text":"<p>Open the tools container if you haven't already:</p> DockerNix <pre><code>make tools\n</code></pre> <pre><code>nix-shell\n</code></pre> <p>Build the lab:</p> <pre><code>make\n</code></pre> <p>Yes it's that simple!</p> <p>Example</p> <p></p> <p>It will take a while to download everything, you can read the architecture document while waiting for the deployment to complete.</p>"},{"location":"installation/production/external-resources/","title":"External resources","text":"<p>Info</p> <p>These resources are optional, the homelab still works without them but will lack some features like trusted certificates and offsite backup</p> <p>Although I try to keep the amount of external resources to the minimum, there's still need for a few of them. Below is a list of external resources and why we need them (also see some alternatives below).</p> Provider Resource Purpose Terraform Cloud Workspace Terraform state backend Cloudflare DNS DNS and DNS-01 challenge for certificates Cloudflare Tunnel Public services to the internet without port forwarding ZeroTier Virtual network Use as VPN to access home network from anywhere (with UDP hole punching)"},{"location":"installation/production/external-resources/#create-credentials","title":"Create credentials","text":"<p>You'll be asked to provide these credentials on first build.</p>"},{"location":"installation/production/external-resources/#create-terraform-workspace","title":"Create Terraform workspace","text":"<p>Terraform is stateful, which means it needs somewhere to store its state. Terraform Cloud is one option for a state backend with a generous free tier, perfect for a homelab.</p> <ol> <li>Sign up for a Terraform Cloud account</li> <li>Create a workspace named <code>homelab-external</code>, this is the workspace where your homelab state will be stored.</li> <li>Change the \"Execution Mode\" from \"Remote\" to \"Local\". This will ensure your local machine, which can access your lab, is the one executing the terraform plan rather than the cloud runners.</li> </ol> <p>If you decide to use a different Terraform backend, you'll need to edit the <code>external/versions.tf</code> file as required.</p>"},{"location":"installation/production/external-resources/#cloudflare","title":"Cloudflare","text":"<ul> <li>Buy a domain and transfer it to Cloudflare if you haven't already</li> <li>Get Cloudflare email and account ID</li> <li>Global API key: https://dash.cloudflare.com/profile/api-tokens</li> </ul>"},{"location":"installation/production/external-resources/#zerotier","title":"ZeroTier","text":"<ul> <li>Create a ZeroTier account https://my.zerotier.com</li> <li>Generate a new API Token at https://my.zerotier.com/account</li> </ul>"},{"location":"installation/production/external-resources/#alternatives","title":"Alternatives","text":"<p>To avoid vendor lock-in, each external provider must have an equivalent alternative that is easy to replace:</p> <ul> <li>Terraform Cloud:<ul> <li>Any other Terraform backends</li> </ul> </li> <li>Cloudflare DNS:<ul> <li>Update cert-manager and external-dns to use a different provider</li> <li>Alternate DNS setup</li> </ul> </li> <li>Cloudflare Tunnel:<ul> <li>Use port forwarding if it's available</li> <li>Create a small VPS in the cloud and utilize Wireguard and HAProxy to route traffic via it</li> <li>Access everything via VPN</li> <li>See also awesome tunneling</li> </ul> </li> <li>ZeroTier virtual network:<ul> <li>Host your own ZeroTier</li> <li>Tailscale (closed source, but you can use Headscale to host your own Tailscale control server)</li> <li>Netmaker (there's no hosted version, you'll need to host your own server)</li> <li>Wireguard server (requires port forwarding)</li> </ul> </li> </ul>"},{"location":"installation/production/prerequisites/","title":"Prerequisites","text":""},{"location":"installation/production/prerequisites/#fork-this-repository","title":"Fork this repository","text":"<p>Because this project applies GitOps practices, it's the source of truth for my homelab, so you'll need to fork it to make it yours:</p> <p>:fontawesome-solid-code-fork: Fork brimdor/homelab</p> <p>By using this project you agree to the license.</p> <p>License TL;DR</p> <ul> <li>This project is free to use for any purpose, but it comes with no warranty</li> <li>You must use the same GPLv3 license  in <code>LICENSE.md</code></li> <li>You must keep the copy right notice and/or include an acknowledgement</li> <li>Your project must remain open-source</li> </ul>"},{"location":"installation/production/prerequisites/#hardware-requirements","title":"Hardware requirements","text":""},{"location":"installation/production/prerequisites/#initial-controller","title":"Initial controller","text":"<p>Info</p> <p>The initial controller is the machine used to bootstrap the cluster, we only need it once, you can use your laptop or desktop</p> <ul> <li>A Linux machine that can run Docker (because the <code>host</code> networking driver used for PXE boot only supports Linux, you can use a Linux virtual machine with bridged networking if you're on macOS or Windows).</li> </ul>"},{"location":"installation/production/prerequisites/#servers","title":"Servers","text":"<p>Any modern <code>x86_64</code> computer(s) should work, you can use old PCs, laptops or servers.</p> <p>Info</p> <p>This is the requirements for each node</p> Component Minimum Recommended CPU 2 cores 4 cores RAM 8 GB 16 GB Hard drive 128 GB 512 GB (depending on your storage usage, the base installation will not use more than 128GB) Node count 1 (checkout the single node cluster adjustments tutorial) 3 or more for high availability <p>Additional capabilities:</p> <ul> <li>Ability to boot from the network (PXE boot)</li> <li>Wake-on-LAN capability, used to wake the machines up automatically without physically touching the power button</li> </ul>"},{"location":"installation/production/prerequisites/#network-setup","title":"Network setup","text":"<ul> <li>All servers must be connected to the same wired network with the initial controller</li> <li>You have the access to change DNS config (on your router or at your domain registrar)</li> </ul>"},{"location":"installation/production/prerequisites/#domain","title":"Domain","text":"<p>Buying a domain is highly recommended, but if you don't have one, see alternate DNS setup.</p>"},{"location":"installation/production/prerequisites/#bios-setup","title":"BIOS setup","text":"<p>Info</p> <p>You need to do it once per machine if the default config is not sufficent, usually for consumer hardware this can not be automated (it requires something like IPMI to automate).</p> <p>Common settings:</p> <ul> <li>Enable Wake-on-LAN (WoL) and network boot</li> <li>Use UEFI mode and disable CSM (legacy) mode</li> <li>Disable secure boot</li> </ul> <p>Boot order options (select one, each has their pros and cons):</p> <ol> <li>Only boot from the network if no operating system found: works on most hardware but you need to manually wipe your hard drive or delete the existing boot record for the current OS</li> <li>Prefer booting from the network if turned on via WoL: more convenience but your BIOS must support it, and you must test it throughly to ensure you don't accidentally wipe your servers</li> </ol> <p>Example</p> <p>Below is my BIOS setup for reference. Your motherboard may have a different name for the options, so you'll need to adapt it to your hardware.</p> <pre><code>Devices:\n  NetworkSetup:\n    PXEIPv4: true\n    PXEIPv6: false\nAdvanced:\n  CPUSetup:\n    VT-d: true\nPower:\n  AutomaticPowerOn:\n    WoL: Automatic  # Use network boot if Wake-on-LAN\nSecurity:\n  SecureBoot: false\nStartup:\n  CSM: false\n</code></pre>"},{"location":"installation/production/prerequisites/#gather-information","title":"Gather information","text":"<ul> <li> MAC address for each machine</li> <li> OS disk name (for example <code>/dev/sda</code>)</li> <li> Network interface name (for example <code>eth0</code>)</li> <li> Choose a static IP address for each machine (just the desired address, we don't set anything up yet)</li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/changelog/","title":"Changelog","text":""},{"location":"reference/changelog/#v008","title":"v0.0.8","text":"<p>Notable changes:</p> <ul> <li>build: run post install scripts by default</li> <li>build: set <code>KUBECONFIG</code> from global Makefile</li> <li>feat(external-dns)!: add cluster name as owner ID</li> <li>feat(tools): install <code>yamllint</code>, <code>ansible-lint</code> and <code>k9s</code></li> <li>feat(tools): set <code>KUBECONFIG</code> by default</li> <li>feat: add pre-commit hooks</li> <li>feat: add script to setup Gitea tokens and OAuth apps</li> <li>perf(argocd): turning on selective sync</li> <li>refactor(docs): migrate to mkdocs</li> <li>refactor(metal): migrate to Fedora 36 for newer packages</li> <li>refactor(pxe)!: combine dhcpd and tftpd to dnsmasq</li> <li>Many bug fixes</li> </ul> <p>Please see git log for full change log.</p>"},{"location":"reference/changelog/#007-alpha","title":"0.0.7-alpha","text":"<ul> <li>Replace standard Vault with Vault Operator</li> <li>Automatically initialize and unseal Vault</li> <li>Declarative secret generation and management</li> <li>Declarative Gitea configuration with YAML</li> <li>Automatic OS rolling upgrade</li> <li>Automatic Kubernetes rolling upgrade</li> <li>Automatic application updates using Renovate (still require manual token generation)</li> <li>Add script to wait for essential services after deployment</li> <li>Add icons and bookmarks to the home page</li> <li>Deploy Matrix chat</li> <li>Replace Authentik with Dex for SSO (still require manual token generation)</li> <li>Switch to Mermaid for diagrams in documentation</li> <li>Replace Vagrant with k3d for development environment</li> <li>Use nip.io domain for development environment</li> <li>Remove Backblaze (S3 Glacier and/or Minio will be added in future version)</li> <li>Enable monitor for the majority of applications</li> <li>Many code refactorings and bug fixes</li> </ul>"},{"location":"reference/changelog/#006-alpha","title":"0.0.6-alpha","text":"<ul> <li>Upgrade to Kubernetes 1.23</li> <li>Support external resources:<ul> <li>Cloudflare DNS and Tunnel</li> <li>Backblaze for backup</li> <li>Auto inject secrets to required namespaces</li> </ul> </li> <li>Replace self-signed certificates with Let's Encrypt production (with API token injected from the <code>external</code> layer)</li> <li>Add DNS records automatically using external-dns</li> <li>Easy Cloudflare Tunnel configuration with annotations</li> <li>Offsite backup to Backblaze B2 bucket using k8up-operator</li> <li>Add private container registry</li> <li>Remove Knative to save resources (temporarily)</li> <li>Enable encryption at rest for Kubernetes Secrets</li> <li>Add more Tekton tasks and pipelines</li> <li>Initialize GitOps repository on Gitea automatically after install</li> <li>Generate MetalLB address pool automatically (default to the last <code>/27</code> subnet)</li> <li>Some bug fixes</li> </ul>"},{"location":"reference/changelog/#005-alpha","title":"0.0.5-alpha","text":"<ul> <li>Add convenience scripts</li> <li>Add Loki for logging</li> <li>Add custom health check for Application and ApplicationSet</li> <li>Use Vault with dev mode on (temporarily until we hit beta)</li> <li>Replace Authelia with Authentik</li> <li>Upgrade to Kubernetes 1.22</li> <li>Upgrade most services to the latest version</li> <li>Set ingress class and storage class explicitly</li> <li>Initial Linkerd and Knative setup (not working yet)</li> <li>Set up Hajimari for home page with automatic ingress discovery</li> <li>Add dev VM for local development or evaluation</li> <li>Optimize bare metal provisioning performance</li> <li>Replace Syncthing with Seafile (may use both in the feature)</li> <li>Enable Gitea SSH cloning via Ingress</li> <li>Various code clean up</li> <li>Add more documents</li> </ul>"},{"location":"reference/changelog/#004-alpha","title":"0.0.4-alpha","text":"<ul> <li>Switch to Rocky Linux</li> <li>Some optimization for bare metal provisioning</li> <li>Switch to k3s and combine Kubernetes cluster config in <code>./infra</code> layer to <code>./metal</code> layer (because k3s is also configured using Ansible)</li> <li>Split boostrap Helm charts in <code>./infra</code> layer to <code>./bootstrap</code> layer (with new ArgoCD pattern) and <code>./system</code> layer</li> <li>Add <code>./platform</code> layer for some applications like Gitea, Tekton...</li> <li>User only need to provision <code>./metal</code> and <code>bootstrap</code> layer, the <code>./bootstrap</code> layer will deploy the remaining layers</li> <li>Provisioning time from empty disk to running services is significantly reduced (thanks to k3s and new bootstrap pattern)</li> <li>Use mdBook for documents</li> <li>Replace Drone CI with Tekton</li> <li>Enable TLS on all Ingresses (using cert-manager)</li> <li>Add some new applications</li> </ul>"},{"location":"reference/changelog/#003-alpha","title":"0.0.3-alpha","text":"<ul> <li>Generate Terraform backend config automatically</li> <li>Switch to CoreOS</li> <li>Better PXE boot setup</li> <li>Diagrams as code</li> </ul>"},{"location":"reference/changelog/#002-alpha","title":"0.0.2-alpha","text":"<ul> <li>Ensure idempotency for bare metal provisioning</li> <li>Extract instead of mounting the OS ISO file</li> <li>Easy initial controller setup (with only Docker)</li> <li>Switch to Fedora</li> <li>Remove LXD</li> <li>Move etcd (Terraform state backend) back to Docker</li> </ul>"},{"location":"reference/changelog/#001-alpha","title":"0.0.1-alpha","text":"<ul> <li>Bare metal provisioning with PXE</li> <li>LXD cluster</li> <li>Terraform state backend (etcd)</li> <li>RKE cluster</li> <li>Core services (Vault, Gitea, ArgoCD,...)</li> <li>Public services to the internet (via port forwarding or Cloudflare Tunnel)</li> </ul>"},{"location":"reference/contributing/","title":"Contributing","text":""},{"location":"reference/contributing/#how-to-contribute","title":"How to contribute","text":""},{"location":"reference/contributing/#bug-report","title":"Bug report","text":"<p>You can create a new GitHub issue with the bug report template.</p>"},{"location":"reference/contributing/#submitting-patches","title":"Submitting patches","text":"<p>Because you may have a lot of changes in your fork, you can't create a pull request directly from your <code>master</code> branch. Instead, create a branch from the upstream repository and commit your changes there:</p> <pre><code>git remote add upstream https://github.com/brimdor/homelab\ngit fetch upstream\ngit checkout upstream/master\ngit checkout -b contrib-fix-something\n\n# Make your changes here\n#\n# nvim README.md\n# git cherry-pick a1b2c3\n#\n# commit, push, etc. as usual\n</code></pre> <p>Then you can send the patch using GitHub pull request or <code>git send-email</code> to mail@eaglepass.io.</p>"},{"location":"reference/faq/","title":"FAQ","text":""},{"location":"reference/faq/#is-it-necessary-to-install-linux-on-my-servers-before-setting-up-the-homelab","title":"Is it necessary to install Linux on my servers before setting up the homelab?","text":"<p>No, and that's the beauty of this setup. You start with empty hard drives, type a single command on your laptop/PC, and it will install the operating system for you automatically and in parallel over the network.</p>"},{"location":"reference/faq/#is-it-necessary-to-keep-the-pxe-server-running","title":"Is it necessary to keep the PXE server running?","text":"<p>No, the ephemeral PXE server is stateless, once Linux is installed on your servers, you can shut it down (or not, ideally, you don't even need to be aware of its existence). The Ansible setup in <code>./metal</code> is idempotent and will start the PXE server if needed.</p>"},{"location":"reference/license/","title":"License","text":"<p>Copyright \u00a9 2020 - 2022 Brimdor</p>"},{"location":"reference/license/#gnu-general-public-license","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"reference/license/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"reference/license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"reference/license/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"reference/license/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"reference/license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"reference/license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"reference/license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"reference/license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"reference/license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"reference/license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"reference/license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"reference/license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"reference/license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"reference/license/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"reference/license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"reference/license/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License.","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"reference/license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"reference/license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"reference/license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"reference/license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"reference/license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"reference/roadmap/","title":"Roadmap","text":"<p>Info</p> <p>Current status: ALPHA</p>"},{"location":"reference/roadmap/#alpha-requirements","title":"Alpha requirements","text":"<p>Literally anything that works.</p>"},{"location":"reference/roadmap/#beta-requirements","title":"Beta requirements","text":"<p>Good enough for tinkering and personal usage, and reasonably secure.</p> <ul> <li> Automated bare metal provisioning<ul> <li> Controller set up (Docker)</li> <li> OS installation (PXE boot)</li> </ul> </li> <li> Automated cluster creation (k3s)</li> <li> Automated application deployment (ArgoCD)</li> <li> Automated DNS management</li> <li> Initialize GitOps repository on Gitea automatically</li> <li> Observability<ul> <li> Monitoring</li> <li> Logging</li> <li> Alerting</li> </ul> </li> <li> SSO</li> <li> Reasonably secure<ul> <li> Automated certificate management</li> <li> Declarative secret management</li> <li> Replace all default passwords with randomly generated ones</li> <li> Expose services to the internet securely with Cloudflare Tunnel</li> </ul> </li> <li> Only use open-source technologies (except external managed services in <code>./external</code>)</li> <li> Everything is defined as code</li> <li> Backup solution (3 copies, 2 seperate devices, 1 offsite)</li> <li> Define SLOs:<ul> <li> 70% availability (might break in the weekend due to new experimentation)</li> </ul> </li> <li> Core applications<ul> <li> Gitea</li> <li> Tekton</li> <li> Vault</li> <li> Private container registry</li> <li> Homepage</li> </ul> </li> </ul>"},{"location":"reference/roadmap/#stable-requirements","title":"Stable requirements","text":"<p>Can be used in \"production\" (for family or even small scale businesses).</p> <ul> <li> A single command to deploy everything</li> <li> Fast deployment time (from empty hard drive to running services in under 1 hour)</li> <li> Fully automatic, not just automated<ul> <li> Bare-metal OS rolling upgrade</li> <li> Kubernetes version rolling upgrade</li> <li> Application version upgrade</li> <li> Encrypted backups</li> <li> Secrets rotation</li> <li> Self healing</li> </ul> </li> <li> Secure by default<ul> <li> SELinux</li> <li> Network policies</li> </ul> </li> <li> Static code analysis</li> <li> Chaos testing</li> <li> Minimal dependency on external services</li> <li> Complete documentation<ul> <li> Diagram as code</li> <li> Book (this book)</li> <li> Walkthrough tutorial and feature demo (video)</li> </ul> </li> <li> Configuration script for new users</li> <li> SLOs:<ul> <li> 99,9% availability (less than 9 hours of downtime per year)</li> <li> 99,99% data durability</li> </ul> </li> <li> Clear upgrade path</li> <li> Additional applications<ul> <li> Matrix with bridges</li> <li> VPN server</li> <li> PeerTube</li> <li> Seafile</li> <li> Blog</li> <li> Development dashboard</li> </ul> </li> </ul>"},{"location":"reference/roadmap/#unplanned","title":"Unplanned","text":"<p>Nice to have</p> <ul> <li> Addition applications<ul> <li> Mail server</li> </ul> </li> <li> Air-gap install</li> <li> Automated testing</li> <li> Security audit</li> <li> Serverless (Knative)</li> <li> Cluster API (last attempt)</li> <li> Split DNS (requires a better router)</li> </ul>"},{"location":"reference/architecture/","title":"Architecture","text":""},{"location":"reference/architecture/decision-records/","title":"Decision records","text":"<p>These are the records of design decisions for future reference in order to understand why things are the way they are. They are not permanent, we can change them in the future if better alternatives become available.</p> Template"},{"location":"reference/architecture/decision-records/#description-of-the-the-change","title":"Description of the the change","text":"<p>Context</p> <p>CHANGEME</p> <p>Decision</p> <p>CHANGEME</p> <p>Consequences</p> <ul> <li>CHANGEME</li> </ul>"},{"location":"reference/architecture/decision-records/#manage-package-versions-in-tools-container","title":"Manage package versions in tools container","text":"<p>Context</p> <p>While Nix is reproducible, we need a way to control the versions of the tools and keep them up-to-date. For example, if we update the nixpkgs hash (in <code>shell.nix</code>) from <code>abcd1234</code> to <code>defa5678</code>:</p> <ul> <li><code>ansible</code>: 2.12.1 -&gt; 2.12.6</li> <li><code>terraform</code>: 1.2.0 -&gt; 1.2.2</li> <li><code>foobar</code>: 1.8.0 -&gt; 1.9.0</li> </ul> <p>That looks good. But when we update it from <code>defa5678</code> to <code>cdef9012</code>:</p> <ul> <li><code>ansible</code>: 2.12.6 -&gt; 2.13.0</li> <li><code>terraform</code>: 1.2.2 -&gt; 1.3.1</li> <li><code>foobar</code>: 1.9.0 -&gt; 2.0.0</li> </ul> <p>This time it breaks <code>foobar</code> because the new major version contains a breaking change.</p> <p>We can pin the specific version of each dependency in <code>shell.nix</code>, however, the maintenance burden is too high (even with Renovate) because we need to update the version of each package regularly rather than just the nixpkgs hash. Instead, we can just bump the nixpkgs hash and run some tests to ensure there is no breaking change.</p> <p>Decision</p> <p>Update the tests to ensure that the versions remain within the desired range (i.e. no breaking change).</p> <p>Consequences</p> <p>We have the rail guard from the tests to ensure that we don't upgrade to a new major version with breaking changes, and we can make a conscious decision to take the necessary steps prior to upgrading to the new major version.</p>"},{"location":"reference/architecture/decision-records/#refactor-the-tools-container-from-plain-dockerfile-to-nix","title":"Refactor the tools container from plain Dockerfile to Nix","text":"<p>Context</p> <p>The previous implementation of the tools container is not reproducible, if someone builds it a few weeks after me, they will receive different versions of the tools. Also, if you change something in the tool list, everything will be downloaded again, with no caching.</p> <p>Decision</p> <p>Move to Nix shell with a Docker wrapper, in case Nix is not available (see commit <code>adbaf32</code>).</p> <p>Consequences</p> <ul> <li>All versions are pinned</li> <li>When you change the list of tools, rebuilding is much faster</li> </ul>"},{"location":"reference/architecture/decision-records/#combine-dhcpd-and-tftpd-to-dnsmasq-in-pxe-server","title":"Combine dhcpd and tftpd to dnsmasq in PXE server","text":"<p>Context</p> <p>Original proposal from @Bourne-ID:</p> <p>Issue statement</p> <p>The use of dhcpd is great for air-gap solutions where a new DHCP is required. However for some home networks which does not have the VLAN capability or for users who would like to use common router DHCP services, the use of DHCPD will cause duplicate DHCP servers and will result in potential network disruption, or will limit the ability to auto-provision the Metal stage of this project.</p> <p>Proposed Solution: DHCP Proxy</p> <p>Use DHCP Proxy services to add PXE features such as Next Server into this project. This allows for users to use the existing DHCP servers which may be locked down or incapable of using Next Server/PXE settings on their network to be able to auto-provision hardware through PXE (with certain common configurations, like static IP allocation or reduction in DHCP request ranges on the DHCP server)</p> <p>Proposed Application: DNSMasq</p> <p>DNSMasq in Proxy mode interoperates with existing DHCP servers over IPv4 to add features such as next-server, TFTP, etc. where such hardware is either locked or unconfigurable for such services. This would be an opt-in change, configurable through the pxe_server defaults file.</p> <p>Proposed Target Audience</p> <p>Users who either do not want to create their own VLAN or lack the hardware to configure such services. Users who want to use common router services for DHCP and have router access to configure static IP and/or DHCP allocation ranges.</p> <p>Additional Risks with Proposed Change</p> <ul> <li>Additional Surface Area for Break-Out Attacks: Originally this project is locked to its own DHCP/VLAN, so any break-outs should be contained accordingly. Using common home networks increases the surface area of break-out attacks if the deployment is compromised.</li> <li>Mitigation: Enrolment into this change is opt in only.</li> </ul> <p>Proposed Next Steps</p> <ol> <li>Trial/Adopt/Halt - A discussion with all or a decision by the project maintainers to identify if this change should exist in this project or live on a fork.</li> <li>Documentation (This is in flight in any situation).</li> </ol> <p>Decision</p> <p>Migrate to dnsmasq (see commit <code>f650c89</code>, thanks to @Bourne-ID)</p> <p>Consequences</p> <ul> <li>DHCP proxy is enabled by default because most people have a standard home network with existing DHCP server, but it can still be disabled to restore the previous behavior</li> </ul>"},{"location":"reference/architecture/decision-records/#migrate-documentation-from-mdbook-to-mkdocs","title":"Migrate documentation from mdBook to MkDocs","text":"<p>Context</p> <p>mdBook is very minimal and light weight, which I personally prefer. However, Backstage TechDocs which I plan to use currently only supports mkDocs.</p> <p>Decision</p> <p>Migrate documentation from mdBook to MkDocs (see commit <code>cd41343</code>).</p> <p>Consequences</p> <ul> <li>We can no longer include only a portion of a file, see facelessuser/pymdown-extensions#1462.</li> </ul>"},{"location":"reference/architecture/decision-records/#choosing-the-base-os","title":"Choosing the base OS","text":"<p>Context</p> <p>I've tried several distributions, and each has advantages and disadvantages. Fedora has a good (enough) balance between stability and new features.</p> <p>Alternatives considered:</p> <ul> <li>Fedora CoreOS (moved to Rocky in <code>7667254</code>):<ul> <li>Pros: automatic and atomic upgrade, immutable, quick installation</li> <li>Cons: hard to run Ansible on (Python is not included)</li> </ul> </li> <li>CentOS/Rocky Linux (moved to Fedora in <code>022b816</code>):<ul> <li>Pros: relatively stable (however we did encounter a breaking change #63, still not sure why)</li> <li>Cons: kernel and packages are too old</li> </ul> </li> <li>Debian: couldn't get it to work with PXE boot and Rocky Linux was sufficient so I didn't push any further</li> <li>Cluster API (previous attempt in <code>a8e4a85</code>, I hope to get this to work someday):<ul> <li>Pros: control bare metal machines via Kubernetes API, open the possibility for autoscaling and autohealing</li> <li>Cons: doesn't support simple WoL and shutdown via SSH (or similar)</li> </ul> </li> </ul> <p>Decision</p> <p>Use Fedora as the base OS.</p> <p>Consequences</p> <p><code>\u00af\\_(\u30c4)_/\u00af</code></p>"},{"location":"reference/architecture/networking/","title":"Networking","text":"<pre><code>flowchart TD\n  subgraph LAN\n    laptop/desktop/phone &lt;--&gt; LoadBalancer\n    subgraph k8s[Kubernetes cluster]\n      Pod --&gt; Service\n      Service --&gt; Ingress\n\n      LoadBalancer\n\n      cloudflared\n      cloudflared &lt;--&gt; Ingress\n    end\n    LoadBalancer &lt;--&gt; Ingress\n  end\n\n  cloudflared -- outbound --&gt; Cloudflare\n  Internet -- inbound --&gt; Cloudflare</code></pre> <p>TODO (PR welcomed)</p>"},{"location":"reference/architecture/overview/","title":"Overview","text":""},{"location":"reference/architecture/overview/#components","title":"Components","text":"<pre><code>+--------------+\n|    ./apps    |\n|--------------|\n|  ./platform  |\n|--------------|       +------------+\n|   ./system   |- - - -| ./external |\n|--------------|       +------------+\n| ./bootstrap  |\n|--------------|\n|   ./metal    |\n|--------------|\n|   HARDWARE   |\n+--------------+\n</code></pre> <p>Main components:</p> <ul> <li><code>./metal</code>: bare metal management, install Linux and Kubernetes</li> <li><code>./bootstrap</code>: GitOps bootstrap with ArgoCD</li> <li><code>./system</code>: critical system components for the cluster (load balancer, storage, ingress, operation tools...)</li> <li><code>./platform</code>: essential components for service hosting platform (vault, git...)</li> <li><code>./apps</code>: user facing applications</li> <li><code>./external</code> (optional): externally managed services</li> </ul> <p>Support components:</p> <ul> <li><code>./tools</code>: tools container, includes all the tools you'll need</li> <li><code>./docs</code>: all documentation go here, this will generate a searchable web UI</li> <li><code>./scripts</code>: scripts to automate common tasks</li> </ul>"},{"location":"reference/architecture/overview/#provisioning-flow","title":"Provisioning flow","text":"<p>Everything is automated, after you edit the configuration files, you just need to run a single <code>make</code> command and it will:</p> <ul> <li>(1) Build the <code>./metal</code> layer:<ul> <li>Create an ephemeral, stateless PXE server</li> <li>Install Linux on all servers in parallel</li> <li>Build a Kubernetes cluster (based on k3s)</li> </ul> </li> <li>(2) Build the <code>./bootstrap</code> layer:<ul> <li>Install ArgoCD</li> <li>Configure the root app to manage other layers (and also manage itself)</li> </ul> </li> </ul> <p>From now on, ArgoCD will do the rest:</p> <ul> <li>(3) Build the <code>./system</code> layer (storage, networking, monitoring, etc)</li> <li>(4) Build the <code>./platform</code> layer (Gitea, Vault, SSO, etc)</li> <li>(5) Build the <code>./apps</code> layer: (Syncthing, Jellyfin, etc)</li> </ul> <pre><code>flowchart TD\n  subgraph metal[./metal]\n    pxe[PXE Server] -.-&gt; linux[Fedora Server] --&gt; k3s\n  end\n\n  subgraph bootstrap[./bootstrap]\n    argocd[ArgoCD] --&gt; rootapp[Root app]\n  end\n\n  subgraph system[./system]\n    metallb[MetalLB]\n    nginx[NGINX]\n    longhorn[Longhorn]\n    cert-manager\n    external-dns[External DNS]\n    cloudflared\n  end\n\n  subgraph external[./external]\n    letsencrypt[Let's Encrypt]\n    cloudflare[Cloudflare]\n  end\n\n  letsencrypt -.-&gt; cert-manager\n  cloudflare -.-&gt; cert-manager\n  cloudflare -.-&gt; external-dns\n  cloudflare -.-&gt; cloudflared\n\n  subgraph platform\n    gitea[Gitea]\n    tekton[Tekton]\n    vault[Vault]\n  end\n\n  subgraph apps\n    jellyfin[Jellyfin]\n    matrix[Matrix]\n    paperless[Paperless]\n    seafile[Seafile]\n  end\n\n  make[Run make] -- 1 --&gt; metal -- 2 --&gt; bootstrap -. 3 .-&gt; system -. 4 .-&gt; platform -. 5 .-&gt; apps</code></pre> <p>Below is the pseudo code for the entire process, you don't have to read it right now, but it will be handy for debugging.</p> Detailed provisioning flow <pre><code>Human run make:\n    build ./metal:\n        install the OS:\n            download the installer image and extract it\n            create a PXE server on the controller using Docker Compose:\n                DHCP server\n                TFTP server\n                HTTP server\n            create init config for each machine\n            turn the machines on via WoL\n            the machines boot:\n                select network boot automatically\n                broadcast DHCP request\n                DHCP server reply:\n                    machine IP\n                    TFTP server (next-server) IP\n                get boot files from TFTP server\n                    GRUB\n                    GRUB config with URL to init config based on MAC address\n                    kernel\n                    initrd\n                boot to the kernel\n                download from HTTP server:\n                    init config from the URL in GRUB config\n                    remaining files required to boot\n                install the OS based on the init config:\n                    configure the system\n                    remaining files required to install\n                reboot to the new OS\n            controller see the machines are ready\n        build a Kubernetes cluster:\n            download k3s binary\n            generate cluster token\n            copy k3s config files\n            enable k3s service and form a cluster\n            create KUBECONFIG file\n            create MetalLB config:\n                use the last /27 subnet of the network\n                apply the config\n    build ./bootstrap:\n        install ArgoCD:\n            apply helm chart\n            wait for status\n        install root app:\n            select values file:\n                if Gitea unreachable (first install):\n                    get data from GitHub\n                else:\n                    get data from Gitea\n            apply helm chart\n            wait for status\nArgoCD apply the rest:\n    clone git repo\n    install components based on directories:\n        ./bootstrap (it manages itself):\n            argocd\n            root\n        ./system:\n            storage\n            loadbalancer\n            ingress\n            etc\n        ./platform (depends on ./system):\n            git:\n                migrate the homelab repository from GitHub\n                ArgoCD switch the source from GitHub to Gitea\n            ci\n            vault\n            etc\n        ./apps (depends on ./system and ./platform):\n            homepage\n            jellyfin\n            etc\n</code></pre>"}]}